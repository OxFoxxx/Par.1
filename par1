import json
import argparse
from bs4 import BeautifulSoup
import requests
import time
import random


# Загрузка категорий из JSON
def load_categories(json_file):
    with open(json_file, 'r', encoding='utf-8') as file:
        return json.load(file)

# Загрузка локализованных названий категорий
def load_localized_categories(txt_file):
    with open(txt_file, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file.readlines()]


# Парсер товаров
def parse_products(category_ids, max_price, min_rating, base_url, headers):
    try:
        # Формирование URL с параметрами
        url = f"https://uk.wallapop.com/app/search={base_url}?category={category}&max_price={max_price}&min_rating={min_rating}"
        
        # Задержка для избежания блокировки
        time.sleep(random.uniform(1, 3))
        
        # Отправка запроса
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Проверка на ошибки HTTP

        # Парсинг HTML
        soup = BeautifulSoup(response.text, 'html.parser')
        products = soup.find_all('div', class_='product-item')  # Замените на реальный селектор

        product_list = []
        max_products = 10

        for product in products:
            if len(product_list) >= max_products:
                break

            # Извлечение данных (замените селекторы на реальные)
            name = product.find('h2', class_='product-name').text.strip()
            price = float(product.find('span', class_='product-price').text.strip().replace('$', ''))
            rating = float(product.find('span', class_='seller-rating').text.strip())
            link = product.find('a', class_='product-link')['href']

            if price <= max_price and rating >= min_rating:
                product_list.append({
                    'Название': name,
                    'Цена': price,
                    'Рейтинг продавца': rating,
                    'Ссылка': link
                })

        return product_list

    except requests.exceptions.RequestException as e:
        print(f"Ошибка при запросе к сайту: {e}")
        return []
    except Exception as e:
        print(f"Ошибка при парсинге: {e}")
        return []

# Основная функция
def main():
    # Загрузка категорий
    categories = load_categories('categories.json')
    localized_categories = load_localized_categories('cats_ru.txt')

    # Парсинг аргументов командной строки
    parser = argparse.ArgumentParser(description="Парсер товаров по категории, цене и рейтингу продавца.")
    parser.add_argument('--category', type=str, required=True, help="Категория товара")
    parser.add_argument('--max_price', type=float, required=True, help="Максимальная цена")
    parser.add_argument('--min_rating', type=float, required=True, help="Минимальный рейтинг продавца")
    args = parser.parse_args()

    # Проверка категории
    if args.category not in categories:
        print("Ошибка: категория не найдена.")
        return

    # Локализация категории
    category_index = categories.index(args.category)
    localized_category = localized_categories[category_index]

    # Базовый URL сайта (замените на реальный)
    base_url = "https://example.com/search"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
    }

    # Парсинг товаров
    products = parse_products(localized_category, args.max_price, args.min_rating, base_url, headers)

    # Вывод результатов
    if not products:
        print("Товаров, соответствующих критериям, не найдено.")
    else:
        for i, product in enumerate(products, 1):
            print(f"{i}. {product['Название']} - {product['Цена']} (Рейтинг: {product['Рейтинг продавца']})")
            print(f"   Ссылка: {product['Ссылка']}")

# Запуск программы
if __name__ == "__main__":
    main()
